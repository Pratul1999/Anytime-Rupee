pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        ECR_REPOSITORY = 'myapp'
        AWS_ACCOUNT_ID = credentials('aws-account-id')  // Jenkins credentials store
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
        IMAGE_TAG = "${env.BUILD_ID}"
        STAGING_CLUSTER = 'app-ecs-cluster-staging'
        PROD_CLUSTER = 'app-ecs-cluster-prod'
        STAGING_SERVICE = 'app-service-staging'
        PROD_SERVICE = 'app-service-prod'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/your-org/your-repo.git'
            }
        }

        stage('Build & Test') {
            steps {
                script {
                    // Build Docker image
                    sh """
                    aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
                    docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
                    docker tag $ECR_REPOSITORY:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
                    """
                }
            }
        }

        stage('Security Scan') {
            steps {
                script {
                    // Run Trivy container scan
                    sh """
                    docker run --rm aquasec/trivy image --exit-code 1 --severity HIGH $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG || true
                    """
                }
            }
        }

        stage('Push to ECR') {
            steps {
                sh """
                docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
                """
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    sh """
                    ./update-task-def.sh $IMAGE_TAG
                    aws ecs update-service --cluster $STAGING_CLUSTER --service $STAGING_SERVICE --force-new-deployment --region $AWS_REGION
                    """
                }
            }
        }

        stage('Integration Tests') {
            steps {
                script {
                    // Your integration test commands here
                    sh 'echo "Running integration tests against staging..."'
                }
            }
        }

        stage('Approval') {
            steps {
                input message: 'Approve deployment to production?', ok: 'Deploy'
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    sh """
                    ./update-task-def.sh $IMAGE_TAG
                    aws ecs update-service --cluster $PROD_CLUSTER --service $PROD_SERVICE --force-new-deployment --region $AWS_REGION
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully."
        }
        failure {
            echo "Pipeline failed."
        }
    }
}
